@{
    Layout = null;
    var html = ""; var h = "";
}

@if (Model.PayPending != null)
{
    <div id="gigs_id_dash" class="tab-pane fade clearfix active in">
        <div class="col-md-12 dash_tab_con_heading_bg padd_left_right_o">
            <h3 class="dash_tab_con_heading_h3">GIGs Payment Pending <span id="spancount">(@TempData.Peek("PayPending"))</span></h3>
        </div>
        <div id="divgigs">
            @foreach (var item in Model.PayPending)
            {

                <div class="col-md-12 dash_jobs_box_1_bg bg_color_comen clearfix">
                    <div class="dash_jobs_box_1_inner">
                        <a href="@Url.Action("Details", "Gigs",new { id = item.GigId, subid = 0 })">
                            <h3>@item.GigTitle</h3>
                        </a>
                        <div class="timeframe_budget_small clearfix">
                            <div class="timeframe_only"><span>Delivery time:</span>&nbsp;<span>@item.GigDuration Days</span></div>
                            <div class="budget_only"><span>Cost: </span>&nbsp;<span>@String.Concat(@item.BudgetASPInt.ToString("#,##0"), " AXPR ", "($", @item.DollarCount.ToString("N2"), ")")</span></div>
                            <div class="axp_star_only">
                                <ul>
                                    @if (item.BadgeCount == 1)
                                    {
                                        <li><i></i></li>
                                    }
                                    else if (item.BadgeCount == 2)
                                    {
                                        <li><i></i></li>
                                        <li><i></i></li>
                                    }
                                    else if (item.BadgeCount == 3)
                                    {
                                        <li><i></i></li>
                                        <li><i></i></li>
                                        <li><i></i></li>
                                    }
                                </ul>
                            </div>
                        </div>
                        <div class="home_client_discription_small clearfix">
                            @*<p>@item.Description</p>*@
                            <div class="readmoretext">
                                @if (item.Description.Length > 100)
                                {
                                    html = item.Description.Substring(0, 100);
                                    h = item.Description.Substring(100 - 1, item.Description.Length - 100);
                                }
                                else
                                {
                                    html = item.Description;
                                }

                                @html
                                @if (item.Description.Length > 100)
                                {
                                    <span class="moreellipses">...&nbsp;</span><span class="morecontent"><span>@h</span>&nbsp;&nbsp;<a href="@Url.Action("Details", "Gigs",new { id = item.GigId, subid = 0 })" class="morelink">Read More</a></span>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="border_buttom_only"></div>
                    <div class="dash_timeremaining_box_bg clearfix">
                        <div class="pull-right">
                            <input type="hidden" id="hfGigSubId_@item.GigSubscriptionId" value="@item.GigSubscriptionId" />
                            <input type="hidden" id="hfGigId_@item.GigId" value="@item.GigId" />
                            <input type="hidden" id="hfReqName_@item.PosterFullName" value="@item.PosterFullName" />
                            <input type="hidden" id="hfTokenAddress_@item.TokenAddress" value="@item.TokenAddress" />
                            <input type="hidden" id="hfGigBudget_@item.GigId" value="@item.BudgetASP" />
                            <input type="hidden" id="hfGigTotalBudget_@item.GigId" value="@(item.BudgetASP + item.Commission)" />
                            @if (item.Role == "C" && item.GigSubscriptionStatus == "A")
                            {
                                <a href="#" disabled class="btn button_all secondary_color_bg acptenabled bu_disable">Payment awaiting</a>
                            }
                            else if (item.Role != "C" && item.GigSubscriptionStatus == "A")
                            {
                                if (item.JobId == 0)
                                {
                                    <a href="#" id="btnDeclinPay" class="dash_time_right_menu decenabled" title="Decline offer">Decline</a>
                                    <a href="#" id="btnPayForGig" class="btn button_all secondary_color_bg acptenabled">Pay</a>
                                }
                                else
                                {
                                    <a href="#" disabled class="btn button_all secondary_color_bg acptenabled bu_disable" title="Decline offer">Pending transaction</a>
                                }
                            }
                        </div>

                        <div class="pull-left">
                            <input type="hidden" id="hfGigTitle_@item.GigTitle" value="@item.GigTitle" />
                            <input type="hidden" id="hfGigId_@item.GigId" value="@item.GigId" />
                            <input type="hidden" id="hfGigSubId_@item.GigSubscriptionId" value="@item.GigSubscriptionId" />
                        </div>
                    </div>
                </div>
            }
            @if (Model.PayPending != null && Model.PayPending.Count == 0)
            {
                <div class="nojob_diplytable" id="divmsg">
                    <div class="col-md-12 category_nojob_bg clearfix">
                        <h3>You don't have any GIGs pending payment</h3>
                    </div>
                </div>
            }
        </div>
        @if (Model.PayPending != null && Model.PayPending.Count > 0 && Model.PayPending[0].Isloadmore == 1)
        {
            <div class="col-md-12 category_loadmore_bg clearfix" id="divloadmore">
                <a href="javascript:" class="btn button_all secondary_color_bg" id="btnloadmore">Load more</a>
            </div>
        }

    </div>
}



<script type="text/javascript">
    var _Id, _ReqUser, _TokenAddress, _SubId, _GigBudget;

    var chat = $.connection.chatHub;
    var notification = $.connection.notificationHub;
    var _hubid = $.connection.hub.id;

    $(document).ready(function () {
        var _count = $("#spancount").text();
        $("#gigpaypending span").text(_count);

        $("#gigs_id_dash").on("click", "#btnloadmore", function () {
            var _Id = $('#gigs_id_dash div.pull-left').last().find('input[id^="hfGigSubId_"]').val();
            LoadMore(_Id);
        });

        $("#gigs_id_dash").on("click", "#btnPayForGig", function () {
            _Id = $(this).parent().find('input[id^="hfGigId_"]').val();
            _SubId = $(this).parent().find('input[id^="hfGigSubId_"]').val();
            _ReqUser = $(this).parent().find('input[id^="hfReqName_"]').val();
            _TotalBudget = $(this).parent().find('input[id^="hfGigTotalBudget_"]').val();
            _TokenAddress = $(this).parent().find('input[id^="hfTokenAddress_"]').val();
            _GigBudget = $(this).parent().find('input[id^="hfGigBudget_"]').val();
            $('#gigPayForGig_title').text('Pay Confirmation');
            $('#gigPayForGig_msg').text('Are you sure you want to pay');
            $('#gigPayOk').show();
            $('#gigNoPayOk').hide();
            openbox(1, 'gigPayForGig_pop');
        });

        $("#gigs_id_dash").on("click", "#btnDeclinPay", function () {
            _Id = $(this).parent().find('input[id^="hfGigId_"]').val();
            _SubId = $(this).parent().find('input[id^="hfGigSubId_"]').val();
            _ReqUser = $(this).parent().find('input[id^="hfReqName_"]').val();
            _TotalBudget = $(this).parent().find('input[id^="hfGigTotalBudget_"]').val();
            _TokenAddress = $(this).parent().find('input[id^="hfTokenAddress_"]').val();
            _GigBudget = $(this).parent().find('input[id^="hfGigBudget_"]').val();
            $('#gigPayForGig_title').text('Decline pay');
            $('#gigPayForGig_msg').text('Are you sure you want to decline the payment');
            $('#gigPayOk').hide();
            $('#gigNoPayOk').show();
            openbox(1, 'gigPayForGig_pop');
        });

        function LoadMore(id) {
            $.ajax({
                type: 'POST',
                cache: false,
                url: '@Url.Action("LoadMoreGigs", "Dashboard")',
                data: { 'type': 'paypen', 'id': id },
                success: function (response) {
                    $("#divloadmore").remove();
                    $('#gigs_id_dash').append(response);
                },
                error: function (jqXHR, exception) {
                    console.log(jqXHR.status);
                    console.log(exception);
                }
            });
        }
    });

    $.connection.hub.start().done(function () {
        $('#gigPayOk').on('click',function(){
            debugger;
            var _gigAmount = _TotalBudget;
            var _posterid = @Session["UserId"];
            var _pendingbidAmount = 0;
            function callback(pendingbidAmount, result)
            {
                if(result = "sucess")
                {
                    _pendingbidAmount = pendingbidAmount;

                    function callback(address, result) {

                        if (address == 'error' || address == '') {
                            closebox('gigPayForGig_pop');
                            openbox(1, 'metamask_comfirmation_id');
                        }
                        else {
                            var _jobid = $("#hfjobidPop").val();
                            var _jobbiddingid = $("#hfjobbiddingidPop").val();
                            var _jobtitle = $("#hfjobtitlePop").val();
                            var _receiverUserId = $("#hfuseridPop").val();

                            if (result == 'approved') {
                                AcceptGigOffer(_SubId, "A");
                            } else if (result == 'reset') {
                                closebox('gigPayForGig_pop');
                                openbox(1, 'metamaskreset');

                            } else if (result == 'insufficient') {
                                closebox('gigPayForGig_pop');
                                openbox(1, 'metamaskinsufficientamount');
                            }
                            else {
                                closebox('gigPayForGig_pop');
                                openbox(1, 'metamaskamountempty');
                            }
                        }
                    }
                    debugger;
                    App.handleAllowance(Number(_gigAmount) + _pendingbidAmount, callback);
                }
            }

            CheckApproveAmount(_posterid, callback);

            //App.getUserAddress(callback);

        });

        function CheckApproveAmount(UserId,callback)
        {
            $.ajax({
                type: 'POST',
                cache: false,
                url: '@Url.Action("CheckApprovedAmount", "Dashboard")',
                data: { 'UserId': UserId },
                success: function (response) {
                    _pendingbidAmount = response.Amount;
                    callback(_pendingbidAmount,"suceess");
                },
                error: function (jqXHR, exception) {
                    console.log(jqXHR.status);
                    console.log(exception);
                    callback(0,"failed");
                }
            });
        }

        function AcceptGigOffer(GigSubscriptionId, status) {
            $.ajax({
                type: 'POST',
                cache: false,
                url: '@Url.Action("GigOffer", "Gigs")',
                data: { 'GigSubscriptionId': GigSubscriptionId, 'Status': status },
                success: function (response) {
                    debugger;
                    if (response.JobId != 0) {
                        var _sendUserId = "@Session["UserId"]";
                        var _fullname = _ReqUser;
                        var _receiverUserId = "@Session["UserId"]";
                        var _userName = "@Session["FullName"]";
                        var _notification = "";
                        var _header = "";
                        var _Url = "";
                        var jobid = response.JobId
                        if (status == "A") {

                            function callback(result)
                            {
                                if(result == "success")
                                {
                                    debugger;
                                    _notification = "Waiting for confirmation of payment. Once this is confirmed, " + _fullname + " can get started."
                                    _header = "Transaction Waiting";
                                    $.connection.hub.start().done(function () {
                                        notification.server.send(_sendUserId, _receiverUserId, _fullname, _notification, _header, _Url);
                                    }).fail(function(){ console.log('Could not connect'); });

                                    closebox('gigPayForGig_pop');
                                }
                            }
                            SaveTransactionDetail(jobid, _sendUserId, 'D', 'D', '', _GigBudget,'',callback);
                        }


                        if (status == "A") {
                            function callBack(txhash) {
                                console.log(txhash);
                                debugger;
                                if (txhash == 'undefined') {
                                    closebox('offer_comfirmation_id_list');
                                    openbox(1, 'openmetamask_comfirmation_id');
                                } else if (txhash == 'cancelled') {
                                    MetaMaskCancel(jobid);
                                    location.reload();
                                } else {
                                    UpdateTransactionDetail(jobid, _sendUserId, 'D', 'D', txhash, _GigBudget);
                                    //location.reload();
                                    $('#gigpaypending').trigger('click');
                                    closebox('gigPayForGig_pop');
                                }
                            }

                            App.handleDeposit(jobid, _TokenAddress, _GigBudget * Math.pow(10, 18), callBack);



                        }
                    } else {
                        _notification = "Payment for the GIG is declined.";
                        _header = "GIG payment declined";
                        $.connection.hub.start().done(function () {
                            notification.server.send(_sendUserId, _receiverUserId, _fullname, _notification, _header, _Url);
                        }).fail(function(){ console.log('Could not connect'); });

                        $('#gigpaypending').trigger('click');
                        closebox('gigPayForGig_pop');
                    }

                    //JobsListedWithoutExchangeRate();

                },
                error: function (jqXHR, exception) {

                    console.log(jqXHR.status);
                    console.log(exception);
                }
            });
        }

        function SaveTransactionDetail(jobid, userid, transactiontype, processtype, hash, bidamount, address,callback) {
            $.ajax({
                type: 'POST',
                cache: false,
                url: '@Url.Action("SaveTransactionDetail", "Dashboard")',
                data: { 'JobId': jobid, 'UserId': userid, 'TransactionType': transactiontype, 'ProcessType': processtype, 'Hash': hash, 'BidAmount': bidamount, 'Address': address },
                success: function (response) {
                    callback("success");
                },
                error: function (jqXHR, exception) {
                    console.log(jqXHR.status);
                    console.log(exception);
                    callback("failed")
                }
            });
        }

        function UpdateTransactionDetail(jobid, userid, transactiontype, processtype, hash) {
            $.ajax({
                type: 'POST',
                cache: false,
                url: '@Url.Action("UpdateTransactionDetail", "Dashboard")',
                data: { 'JobId': jobid, 'UserId': userid, 'TransactionType': transactiontype, 'ProcessType': processtype, 'Hash': hash },
                success: function (response) {

                },
                error: function (jqXHR, exception) {
                    console.log(jqXHR.status);
                    console.log(exception);
                }
            });
        }

        function MetaMaskCancel(jobid) {
            $.ajax({
                type: 'POST',
                cache: false,
                url: '@Url.Action("MetaMaskCancel", "Dashboard")',
                data: { 'JobId': jobid },
                success: function (response) {

                },
                error: function (jqXHR, exception) {
                    console.log(jqXHR.status);
                    console.log(exception);
                }
            });
        }

        $('#gigNoPayOk').on('click',function(){
            AcceptGigOffer(_SubId, 'D');
        });
        $('#btnResetMetaMask').unbind("click").bind("click", function () {
             function callback(address) {
                if (address == 'error' || address == '') {
                    openbox(1, 'metamask_comfirmation_id');
                    // closebox('offer_comfirmation_id');
                }
                else {
                    var _userid = @Session["UserId"];
                    $.ajax({
                        type: 'POST',
                        cache: false,
                        url: '@Url.Action("ResetWallet", "Dashboard")',
                        data: { 'WalletAddress': address, 'UserId': _userid },
                        success: function (response) {
                            if (response == "Success") {
                                //location.reload();
                                App.resetApproveBalance();
                                closebox('metamaskreset');
                                $('#metamask').addClass('header_loged_menua_metamask');
                                $('.balance').html('<span>Reset</span><span>Wallet</span>');
                                localStorage.setItem("Metamask", "A");
                            }
                        }
                    });
                }                                         
            };              
            App.getUserAddress(callback);                           
        });            
        $('#btnApproveMetaMask').click(function () {                              
            closebox('metamaskamountempty');
            function balCallBack(res){
                if(res == 'empty')
                {
                    openbox(1, "metamaskempty");
                } else if (res == 'ethempty') {
                    openbox(1, "ethempty");
                }
                else if(res == 'isbalance')
                {
                    var userid = @Session["UserId"];
                    var Hash = localStorage.getItem("Address");
                    $('#metamask').addClass('header_loged_menua_metamask');
                    $('.balance').html('<span>Authorisation </span><span>pending</span>');
                    $('#metamask').attr('onclick', '');
                    localStorage.setItem("Metamask", "P");
                    function callback(result)
                    {
                        if(result == "success")
                        {
                            function callback(result){
                                if(result =='cancelled'){
                                    //SaveTransactionDetail(1,userid,'A','A',Hash,0);                                    
                                }
                                else
                                {
                                    location.reload();
                                }
                            }
                            App.handleApprove(callback);
                        }                            
                    }
                    SaveTransactionDetail(0,userid,'A','A','',0,Hash,callback);
                }  
            }                          
            App.checkBalance(balCallBack);               
        });
    });
</script>
