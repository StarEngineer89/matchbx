@model MatchBX.Models.ResetPasswordViewModel
@{
    ViewBag.Title = "Reset password";
    var message = TempData["ErrorMessage"] != null ? TempData["ErrorMessage"].ToString() : null;
}
<script type="text/javascript">
    $(function () {
        $("#form").validate({
            errorClass: "error_span",
            errorElement: "span",
            ignore: "",
            rules: {

                Password: {
                    required: true,
                   chkpswd:true
                },

                ConfirmPassword: {
                    required: true,
                    matchpswd:true
                }
            },
            messages: {

                Password: {
                    required: "Please enter your password",
                    chkpswd: ""
                },
                ConfirmPassword: {
                    required:"Confirm password can’t be blank! Please correct",
                    matchpswd: "Passwords don’t match! Please correct"
                }
            },
            highlight: function (element, errorClass) {
                $(element).removeClass(errorClass);
            },
            submitHandler: function (form) {
                _ResetPasswordViewModel = {
                    Password: $("#pwd").val(),
                    Password: $("#conpwd").val(),
                }
                form.submit();
            }
        });
        $.validator.addMethod("chkpswd", function (value, element) {
            let valid = 0, uCase = false, lCase = false, dig = false, spec = false, mLen = false;
            // tslint:disable-next-line:prefer-const
            let upperCase = new RegExp('^(?=.*?[A-Z])');
            // tslint:disable-next-line:prefer-const
            let lowerCase = new RegExp('^(?=.*?[a-z])');
            // tslint:disable-next-line:prefer-const
            let digit = new RegExp('^(?=.*?[0-9])');
            // tslint:disable-next-line:prefer-const
            let special = new RegExp('^(?=.*?[#?!@@$%^&*-])');
            // tslint:disable-next-line:prefer-const
            let minLength = new RegExp('^.{8,}');

            // tslint:disable-next-line:prefer-const
            let pwd = value;
            if (!special.test(pwd)) {
                spec = false;
                $('#password_input_bg').show();
            } else {
                spec = true;
            }
            if (!upperCase.test(pwd)) {
                uCase = false;
                $('#password_input_bg').show();
            } else {
                uCase = true;
            }
            if (!lowerCase.test(pwd)) {
                lCase = false;
                $('#password_input_bg').show();
            } else {
                lCase = true;
            }
            if (!digit.test(pwd)) {
                dig = false;
                $('#password_input_bg').show();
            } else {
                dig = true;
            }
            if (!minLength.test(pwd)) {
                mLen = false;
                $('#password_input_bg').show();
            } else {
                mLen = true;
            }

            if (spec && uCase && lCase && dig && mLen) {
                valid = 1;

            } else {
                $('#password_input_bg').show();
                valid = 0;
                $('#password_input_bg').show();
            }
            if (valid != 1) {
                return false
            } else if (valid == 1) {
                return true;
            }
            //var pwd = value;
            //var digits = pwd.replace(/[^0-9]/g, "").length;
            //var characters = pwd.replace(/[^a-zA-Z]/g, "").length;
            //if(digits>=1 && characters>=8)
            //{
            //    return true;
            //}
            //else
            //{
            //    return false;
            //}

        });
        //$.validator.addMethod("chkpswd", function (value, element) {
        //    var pwd = value;
        //    var digits = pwd.replace(/[^0-9]/g, "").length;
        //    var characters = pwd.replace(/[^a-zA-Z]/g, "").length;
        //    if (digits >= 1 && characters >= 8) {
        //        return true;
        //    }
        //    else {
        //        return false;
        //    }
        //});
        $.validator.addMethod("matchpswd", function (value, element) {
            var conpswd = value;
            var pswd = new RegExp($("#pwd").val());
            var res = pswd.test(conpswd);
            if (res == true) {
                return true;
            }
            else {
                return false;
            }
        });
    });
</script>

<script>
    $(document).ready(function () {
        //$('#pwd').on('keypress', function(){
        //        $("#spanpswd").hide();
        //    }
        //);​
        $('#pwd').focus(function () {
            $('#password_input_bg').css('display', 'inline-block');
        });
        $('#pwd').focusout(function () {
            $('#password_input_bg').css('display', 'none');
        });
        $('#pwd').on('change keyup copy paste cut', function () { //function() {
            let valid = 0;
            let upperCase = new RegExp('^(?=.*?[A-Z])');
            let lowerCase = new RegExp('^(?=.*?[a-z])');
            let digit = new RegExp('^(?=.*?[0-9])');
            let special = new RegExp('^(?=.*?[#?!@@$%^&*-])');
            let minLength = new RegExp('^.{8,}');

            let pwd = $('#pwd').val();
            if (!minLength.test(pwd)) {
                $('#password_input_bg').show();
                $('.minlength').show();
                $('.minlength').addClass('pass_error_style');
                valid = 0;
            } else {
                $('.minlength').show().removeClass('pass_error_style').addClass('pass_style');
                valid = 1;
            }
            if (!upperCase.test(pwd)) {
                $('#password_input_bg').show();
                $('.capital_letter').show();
                $('.capital_letter').addClass('pass_error_style');
                valid = 0;
            } else {
                $('.capital_letter').show().removeClass('pass_error_style').addClass('pass_style');
                valid = 1;
            }
            if (!lowerCase.test(pwd)) {
                $('#password_input_bg').show();
                $('.letter').show();
                $('.letter').addClass('pass_error_style');
                valid = 0;
            } else {
                $('.letter').show().removeClass('pass_error_style').addClass('pass_style');
                valid = 1;
            }
            if (!digit.test(pwd)) {
                $('#password_input_bg').show();
                $('.number').show();
                $('.number').addClass('pass_error_style');
                valid = 0;
            } else {
                $('.number').show().removeClass('pass_error_style').addClass('pass_style');
                valid = 1;
            }
            if (!special.test(pwd)) {
                $('#password_input_bg').show();
                $('.special').show();
                $('.special').addClass('pass_error_style');
                valid = 0;
            } else {
                $('.special').show().removeClass('pass_error_style').addClass('pass_style');
                valid = 1;
            }

            if ($("#form").valid()) {
                if (valid != 1) {
                    $('#password_input_bg').show();
                } else if (valid == 1) {
                    $('#password_input_bg').hide();
                }
            } else {
                $('#password_input_bg').show();
            }
        });

        $('#divMsgSuccess').removeClass("col-md-12 success_message_show_small");
        $('#msgIcon').removeClass("check_success_icon");
        $('#msg').html("");
        $('#errorMsg').empty();
        var msg = "@message";
        if (msg != null && msg != '') {
            if (msg == 'Your password has been reset successfully.')
            {
                $('#divMsgSuccess').addClass("col-md-12 success_message_show_small");
                $('#msgIcon').addClass("check_success_icon");
                $('#msg').html(msg);
            }
            else
            {
                $('#errorMsg').html(msg);
            }

        }
    });
</script>

<div class="col-md-12 login_smoll_box_textbg">
    <h2>Reset your password</h2>
    <p> </p>
</div>
<div class="login_smoll_container clearfix">

    <div class="col-md-12 login_small_box">
        @using (Html.BeginForm("ResetPassword", "Login", FormMethod.Post, new { @class = "form-horizontal", role = "form",@id = "form" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.Email);
            <div class="form-group clearfix">
                <label for="Password" class="input_label_style">Password</label>
                @*<input type="password" class="form-control form_input" id="password">*@
                @Html.PasswordFor(m => m.Password, new { @id = "pwd", @class = "form-control form_input ", @name = "Password", @maxlength = "30" })
                @Html.ValidationMessageFor(m => m.Password, "", new { @class = "error_span" })
                @*<span id="spanpswd" class="pass_info_p">Password must contain at least 8 letters and 1 number</span>*@
                <div id="password_input_bg" class="password_input_bg" style="display: none;">
                    <div class="password_must_contain_bg clearfix">
                        <p>Password must contain</p>
                        <ul>
                            <!-- pass_style
                pass_error_style -->
                            <li class="letter pass_error_style">
                                <i class="letter pass_error_style"></i>
                                <span>
                                    A least
                                    <b>one letter</b>
                                </span>
                            </li>
                            <li class="capital_letter pass_error_style">
                                <i class="capital_letter pass_error_style"></i>
                                <span>
                                    A least
                                    <b>one capital letter</b>
                                </span>
                            </li>
                            <li class="number pass_error_style">
                                <i class="number pass_error_style"></i>
                                <span>
                                    A least
                                    <b>one number</b>
                                </span>
                            </li>
                            <li class="minlength pass_error_style">
                                <!-- pass_error_style -->
                                <i class="minlength pass_error_style"></i>
                                <span>
                                    A least
                                    <b>8 characters</b>
                                </span>
                            </li>
                            <li class="special pass_error_style">
                                <i class="special pass_error_style"></i>
                                <span>
                                    A least
                                    <b>one special character</b>
                                </span>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="form-group clearfix">
                <label for="ConfirmPassword" class="input_label_style">Confirm Password</label>
                @*<input type="password" class="form-control form_input" id="password">*@
                @Html.PasswordFor(m => m.ConfirmPassword, new { @id = "conpwd", @class = "form-control form_input", name = "ConfirmPassword", @maxlength = "30" })
                @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "error_span" })
            </div>
            <div class="form-group clearfix">
                @*<a href="#" class="btn btn-default register_small_button secondary_color_bg" title="Send password">Send password</a>*@
                <input type="submit" class="btn btn-default register_small_button secondary_color_bg" title="Send password" value="Send password" />
            </div>
            <div class="form-group clearfix">
                <span id="errorMsg" class="error_span"> </span>
            </div>
            <div class="form-group clearfix">
                <div id="divMsgSuccess">
                    <i id="msgIcon"></i>
                    <p id="msg"></p>
                </div>
            </div>
        }
    </div>

</div><!--login_smoll_container-->