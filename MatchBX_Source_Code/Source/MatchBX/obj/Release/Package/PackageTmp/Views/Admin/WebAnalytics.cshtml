
@{
    Layout = null;
}

@{
    ViewBag.Title = "WebAnalytics";
}

<script>
    (function (w, d, s, g, js, fs) {
        g = w.gapi || (w.gapi = {}); g.analytics = { q: [], ready: function (f) { this.q.push(f); } };
        js = d.createElement(s); fs = d.getElementsByTagName(s)[0];
        js.src = 'https://apis.google.com/js/platform.js';
        fs.parentNode.insertBefore(js, fs); js.onload = function () { g.load('analytics'); };
    }(window, document, 'script'));
</script>
<link rel="stylesheet" href="@Url.Content("~/Content/css/google_chart.css")" />
<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<div id="embed-api-auth-container"></div>
<div class="jobanalytics_graphs_bg jobanalytics_graphs_top dash_jobs_box_1_bg bg_color_comen clearfix">
    <div class="jobanalytics_graphs_top_head dash_tab_con_heading_bg padd_left_right_o">
        <h3 class="dash_tab_con_heading_h3">Web Analytics</h3>
    </div>
    <div class="col-md-6">
        <div id="active-users-container"></div>
    </div>
    <div class="col-md-4">
        <b id="users"></b>
        <p>Users</p>
    </div>
    <div class="col-md-4">
        <b id="sessions"></b>
        <p>Sessions</p>
    </div>
    <div class="col-md-4">
        <b id="bounce-rate"></b>
        <p>Bounce Rate</p>
    </div>
    <div class="col-md-4">
        <b id="session-duration"></b>
        <p>Session Duration</p>
    </div>
</div>
<div class="jobanalytics_graphs_bg dash_jobs_box_1_bg bg_color_comen  clearfix" id="divcontent">
    <div><h4>User visits</h4></div>
    <div id="chart-1-container" class="clearfix"></div>
    <div id="chart-2-container" class="clearfix"></div>
    <div><h4>Sessions by country</h4></div>
    <div id="chart-3-container" class="clearfix"></div>
    <div><h4>Sessions by device</h4></div>
    <div id="chart-4-container" class="clearfix"></div>
    <div><h4>Page views by users</h4></div>
    <div id="chart-5-container" class="clearfix"></div>
    <div><h4>New users by source</h4></div>
    <div id="chart-6-container" class="clearfix"></div>
    <div id="chart-7-container" class="clearfix"></div>
    <div id="view-selector-1-container" style="display: none;"></div>
    <div id="view-selector-2-container" style="display: none;"></div>
    <div id="view-selector-3-container" style="display: none;"></div>
    <div id="view-selector-4-container" style="display: none;"></div>
    <div id="view-selector-5-container" style="display: none;"></div>
    <div id="view-selector-6-container" style="display: none;"></div>
</div>

<script async src="https://www.google-analytics.com/analytics.js"></script>
@*<script src="~/Content/js/google/active-users.js"></script>*@
<script type="text/javascript" src="https://www.google.com/jsapi"></script>
<link href="~/Content/js/google/active-users.css" rel="stylesheet" />
<script>
    var dataChart1, dataChart2, dataChart3, dataChart4, dataChart5, dataChart6, report;
    google.charts.load('current', { 'packages': ['corechart'] });

    gapi.analytics.ready(function () {
        gapi.analytics.createComponent('ActiveUsers', {

            initialize: function () {
                this.activeUsers = 0;
                gapi.analytics.auth.once('signOut', this.handleSignOut_.bind(this));
            },

            execute: function () {
                // Stop any polling currently going on.
                if (this.polling_) {
                    this.stop();
                }

                this.render_();

                // Wait until the user is authorized.
                if (gapi.analytics.auth.isAuthorized()) {
                    this.pollActiveUsers_();
                } else {
                    gapi.analytics.auth.once('signIn', this.pollActiveUsers_.bind(this));
                }
            },

            stop: function () {
                clearTimeout(this.timeout_);
                this.polling_ = false;
                this.emit('stop', { activeUsers: this.activeUsers });
            },

            render_: function () {
                let opts = this.get();

                // Render the component inside the container.
                this.container = typeof opts.container == 'string' ?
                    document.getElementById(opts.container) : opts.container;

                this.container.innerHTML = opts.template || this.template;
                this.container.querySelector('b').innerHTML = this.activeUsers;
            },

            pollActiveUsers_: function () {
                let options = this.get();
                let pollingInterval = (options.pollingInterval || 5) * 1000;

                if (isNaN(pollingInterval) || pollingInterval < 5000) {
                    throw new Error('Frequency must be 5 seconds or more.');
                }

                this.polling_ = true;
                gapi.client.analytics.data.realtime
                    .get({ ids: options.ids, metrics: 'rt:activeUsers' })
                    .then(function (response) {
                        let result = response.result;
                        let newValue = result.totalResults ? +result.rows[0][0] : 0;
                        let oldValue = this.activeUsers;

                        this.emit('success', { activeUsers: this.activeUsers });

                        if (newValue != oldValue) {
                            this.activeUsers = newValue;
                            this.onChange_(newValue - oldValue);
                        }

                        if (this.polling_ == true) {
                            this.timeout_ = setTimeout(this.pollActiveUsers_.bind(this),
                                pollingInterval);
                        }
                    }.bind(this));

                gapi.client.analytics.data.realtime
                    .get({ ids: 'ga:181233996', metrics: 'rt:pageviews', dimensions: 'rt:minutesAgo' })
                    .then(function (response) {
                        // Instantiate and draw our chart, passing in some options.
                        //var data = new google.visualization.arrayToDataTable(array);
                        console.log(response);
                        var chartPie = new google.visualization.ColumnChart(document.getElementById('chart-7-container'));
                        response.result.rows.reverse();
                        var option = {
                            title: 'Page Views',
                            width: '100%',                         
                            vAxis:
                            {
                                direction: '1',
                            },
                            hAxis:
                            {
                                direction: '1',
                                textPosition: 'none'
                            },
                            tooltip: { isHtml: true },
                            legend: 'none'
                        };
                        var data = new google.visualization.DataTable();
                        data.addColumn('string', 'Time'); // Implicit domain label col.
                        data.addColumn('number', 'Count'); // Implicit series 1 data col.
                        data.addColumn({ type: 'string', role: 'tooltip', 'p': {'html': true} });
                        $.each(response.result.rows, function (index, item) {
                            data.addRows([[item[0], Number(item[1]), '<div style="width: 100px; color: black;"><h6><b>' + item[1] + ' Page Views</b></h6><p style="color: black;">' + item[0] + ' min ago</p></div>']]);
                        });
                        chartPie.draw(data, option);
                    }.bind(this));
            },

            onChange_: function (delta) {
                let valueContainer = this.container.querySelector('b');
                if (valueContainer) valueContainer.innerHTML = this.activeUsers;

                this.emit('change', { activeUsers: this.activeUsers, delta: delta });
                if (delta > 0) {
                    this.emit('increase', { activeUsers: this.activeUsers, delta: delta });
                } else {
                    this.emit('decrease', { activeUsers: this.activeUsers, delta: delta });
                }
            },

            handleSignOut_: function () {
                this.stop();
                gapi.analytics.auth.once('signIn', this.handleSignIn_.bind(this));
            },

            handleSignIn_: function () {
                this.pollActiveUsers_();
                gapi.analytics.auth.once('signOut', this.handleSignOut_.bind(this));
            },

            template:
                '<div class="col-md-6">' +
                    '<b class="ActiveUsers-value"></b>' +
                    '<p>Active Users</p>' +
                '</div>'
            //'<div class="ActiveUsers">' +
            //  '<p>Active Users: <b class="ActiveUsers-value"></b>' +
            //'</div>',

        });   

        /**
         * Authorize the user immediately if the user has already granted access.
         * If no access has been created, render an authorize button inside the
         * element with the ID "embed-api-auth-container".
         */
        gapi.analytics.auth.authorize({
            container: 'embed-api-auth-container',
            clientid: '240076438123-h9hpb6sfo6clm4ve08ovaon2idcjg4im.apps.googleusercontent.com'
        });

        var activeUsers = new gapi.analytics.ext.ActiveUsers({
            container: 'active-users-container',
            pollingInterval: 5
        });

        /**
         * Create a ViewSelector for the first view to be rendered inside of an
         * element with the id "view-selector-1-container".
         */
        var viewSelector1 = new gapi.analytics.ViewSelector({
            container: 'view-selector-1-container'
        });


        /**
         * Create a ViewSelector for the second view to be rendered inside of an
         * element with the id "view-selector-2-container".
         */
        var viewSelector2 = new gapi.analytics.ViewSelector({
            container: 'view-selector-2-container'
        });

        var viewSelector3 = new gapi.analytics.ViewSelector({
            container: 'view-selector-3-container'
        });

        var viewSelector4 = new gapi.analytics.ViewSelector({
            container: 'view-selector-4-container'
        });

        var viewSelector5 = new gapi.analytics.ViewSelector({
            container: 'view-selector-5-container'
        });

        var viewSelector6 = new gapi.analytics.ViewSelector({
            container: 'view-selector-6-container'
        });

        // Render both view selectors to the page.
        viewSelector1.execute();
        viewSelector2.execute();
        viewSelector3.execute();
        viewSelector4.execute();
        viewSelector5.execute();
        viewSelector6.execute();

        var data = {
            ids: 'ga:181233996',
            metrics: 'rt:activeUsers'
        };
        activeUsers.set(data).execute();

        String.prototype.toHHMMSS = function () {
            var sec_num = parseInt(this, 10); // don't forget the second param
            var hours = Math.floor(sec_num / 3600);
            var minutes = Math.floor((sec_num - (hours * 3600)) / 60);
            var seconds = sec_num - (hours * 3600) - (minutes * 60);

            if (hours < 10) { hours = "0" + hours; }
            if (minutes < 10) { minutes = "0" + minutes; }
            if (seconds < 10) { seconds = "0" + seconds; }
            return hours + ':' + minutes + ':' + seconds;
        }

        var datas = {
            ids: 'ga:181233996',
            metrics: 'ga:users,ga:sessions,ga:bounceRate,ga:sessionDuration',
            'start-date': '7daysAgo',
            'end-date': 'yesterday'
        };

        report = new gapi.analytics.report.Data({
            query: datas
        });

        report.on('success', function (response) {
            
            console.log(response);
            $('#users').text(response.rows[0][0]);
            $('#sessions').text(response.rows[0][1]);
            $('#bounce-rate').text(Number(response.rows[0][2]).toFixed(2) + '%');
            var time = response.rows[0][3].toHHMMSS().split(':');
            $('#session-duration').text(time[0] + 'h ' + time[1] + 'm ' + time[2] + 's');
            $.each(response.rows[0], function (index, value) {
                console.log(value);
            });
        });

        report.execute();

        /**
         * Create a new DataChart instance with the given query parameters
         * and Google chart options. It will be rendered inside an element
         * with the id "chart-container".
         */
        dataChart1 = new gapi.analytics.googleCharts.DataChart({
            query: {
                metrics: 'ga:Users',
                dimensions: 'ga:date',
                'start-date': '7daysAgo',
                'end-date': 'yesterday',
                'max-results': 1000,
            },
            chart: {
                container: 'chart-1-container',
                type: 'LINE',
                options: {
                    width: '100%'
                }
            }
        });


        /**
         * Create the second DataChart for top countries over the past 30 days.
         * It will be rendered inside an element with the id "chart-2-container".
         */
        dataChart2 = new gapi.analytics.googleCharts.DataChart({
            query: {
                metrics: 'ga:sessions',
                dimensions: 'ga:country',
                'start-date': '7daysAgo',
                'end-date': 'yesterday',
                'max-results': 6,
                sort: '-ga:sessions'
            },
            chart: {
                container: 'chart-2-container',
                type: 'PIE',
                options: {
                    width: '100%',
                    pieHole: 4 / 9
                }
            }
        });

        dataChart3 = new gapi.analytics.googleCharts.DataChart({
            query: {
                metrics: 'ga:sessions',
                dimensions: 'ga:country',
                'start-date': '7daysAgo',
                'end-date': 'yesterday',
                'max-results': 6,
                sort: '-ga:sessions'
            },
            chart: {
                container: 'chart-3-container',
                type: 'GEO',
                options: {
                    width: '100%'
                }
            }
        });

        dataChart4 = new gapi.analytics.googleCharts.DataChart({
            query: {
                metrics: 'ga:sessions',
                dimensions: 'ga:deviceCategory',
                'start-date': '7daysAgo',
                'end-date': 'yesterday',
                'max-results': 6,
                sort: '-ga:sessions'
            },
            chart: {
                container: 'chart-4-container',
                type: 'PIE',
                options: {
                    width: '100%',
                    pieHole: 4 / 9
                }
            }
        });

        dataChart5 = new gapi.analytics.googleCharts.DataChart({
            query: {
                metrics: 'ga:pageviews',
                dimensions: 'ga:pagePath',
                'start-date': '7daysAgo',
                'end-date': 'yesterday',
                'max-results': 6
            },
            chart: {
                container: 'chart-5-container',
                type: 'TABLE',
                options: {
                    width: '100%'
                }
            }
        });

        dataChart6 = new gapi.analytics.googleCharts.DataChart({
            query: {
                metrics: 'ga:newUsers',
                dimensions: 'ga:source',
                'start-date': '7daysAgo',
                'end-date': 'yesterday',
                'max-results': 1000
            },
            chart: {
                container: 'chart-6-container',
                type: 'COLUMN',
                options: {
                    width: '100%'
                }
            }
        });

        /**
         * Update the first dataChart when the first view selecter is changed.
         */
        viewSelector1.on('change', function (ids) {
            dataChart1.set({ query: { ids: ids } }).execute();

        });

        /**
         * Update the second dataChart when the second view selecter is changed.
         */
        viewSelector2.on('change', function (ids) {
            dataChart2.set({ query: { ids: ids } }).execute();
        });

        viewSelector3.on('change', function (ids) {
            dataChart3.set({ query: { ids: ids } }).execute();
        });

        viewSelector4.on('change', function (ids) {
            dataChart4.set({ query: { ids: ids } }).execute();
        });

        viewSelector5.on('change', function (ids) {
            dataChart5.set({ query: { ids: ids } }).execute();
        });

        viewSelector6.on('change', function (ids) {
            dataChart6.set({ query: { ids: ids } }).execute();
        });

    });

    $('#date-range').unbind('change');
    $('#date-range').change(function () {
        if (this.value != 0) {
            dataChart1.set({ query: { 'start-date': this.value + 'daysAgo' } }).execute();
            dataChart2.set({ query: { 'start-date': this.value + 'daysAgo' } }).execute();
            dataChart3.set({ query: { 'start-date': this.value + 'daysAgo' } }).execute();
            dataChart4.set({ query: { 'start-date': this.value + 'daysAgo' } }).execute();
            dataChart5.set({ query: { 'start-date': this.value + 'daysAgo' } }).execute();
            dataChart6.set({ query: { 'start-date': this.value + 'daysAgo' } }).execute();
            report.set({ query: { 'start-date': this.value + 'daysAgo' } }).execute();
        }
    });
</script>
