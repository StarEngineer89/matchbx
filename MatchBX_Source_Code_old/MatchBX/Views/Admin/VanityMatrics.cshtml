@model Business.VanityMatrics
@{
    ViewBag.Title = "VanityMatrics";
}
@*<style>
.goog-tooltip div {
  background-color: white !important;
  border: 1px solid black !important;
  color: black !important;
  font-size: 12px !important;
}

</style>
<link rel="stylesheet" href="@Url.Content("~/Content/css/google_chart.css")" />*@
<div class="jobanalytics_graphs_bgbg clearfix">
    <div class="jobanalytics_graphs_top_head dash_tab_con_heading_bg padd_left_right_o">
        <h3 class="dash_tab_con_heading_h3">Vanity Metrics</h3>
    </div>
    <!--tab div section-->
    <div class="jobanalytics_graphs_bg jobanalytics_graphs_top dash_jobs_box_1_bg bg_color_comen padd_left_right_o clearfix">
        <div class="col-md-12 padd_left_right_o clearfix">
            <div class="col-md-4">
                <b id="jobPosted"></b>
                <p>Job Posts</p>
            </div>
            <div class="col-md-4">
                <b id="freelancers"></b>
                <p>Freelancers</p>
            </div>
            <div class="col-md-4">
                <b id="jobPosters"></b>
                <p>Job Posters</p>
            </div>
        </div>
        <div class="col-md-12 padd_left_right_o clearfix">
            <div class="col-md-4">
                <b id="respondents"></b>
                <p>Respondents</p>
            </div>
            <div class="col-md-4">
                <b id="avgAXPRJob"></b>
                <p>Average AXPR per Job Post</p>
            </div>
            <div class="col-md-4">
                <b id="AXPRJobSeeker"></b>
                <p>AXPR Earned by Job Seekers</p>
            </div>
        </div>
        <div class="col-md-12 padd_left_right_o clearfix">
            <div class="col-md-4">
                <b id="AXPRBurned"></b>
                <p>AXPR Burned</p>
            </div>
        </div>
        </div>
    <div class="jobanalytics_graphs_bg dash_jobs_box_1_bg bg_color_comen  clearfix" id="divcontent">
        <div id="imgloader" style="display:none;position: absolute;  top: 0;left: 0; right: 0; text-align: center; background: #fff;z-index: 5; padding: 20px;">
            <img src="~/Content/images/loader.gif" />
        </div>
        <div>
            <div><h4>Users by Geography</h4></div>
            <div id="gio_chart_div" class="clearfix"></div>
            <div id="dual_chart_div" class="clearfix"></div>
            <div id="column_chart_div" class="clearfix"></div>
            <div id="pie_chart_div" class="clearfix"></div>
        </div>
        @*<div id="column_chart_div" class="clearfix"></div>
        <div id="table_chart_div" class="clearfix"></div>*@
    </div>
</div><!-- // tab div section-->

<script type="text/javascript">


    $(document).ready(function () {
        var chartData = @Html.Raw(Json.Encode(Model));
        console.log('Geo Chart: ' + chartData);
        var geoObject = [], categoryObject = [], jobStatusObject = [], userActionObject = [];
        GroupData(chartData);
        LoadGoogleCharts();
        SetDisplayValues(chartData);

        function GroupData(_chartData) {
            GroupDataByCountry(chartData.UserDetails);
            GroupDataByCategory(chartData.JobDetails);
            GroupDataByJobStatus(chartData.JobDetails);
            GroupDataByUserAction(chartData.UserDetails, chartData.LoginDetails);
        }

        function GroupDataByCountry(_chartData) {
            $.each(_chartData, function (index, item) {
                var found = geoObject.some(function (el) {
                    return el.Country === item.Geography;
                });
                if (!found) {
                    var obj = {
                        Country: item.Geography,
                        Users: 1
                    }
                    geoObject.push(obj);
                } else {
                    var index = $.map(geoObject, function(obj, index) {
                        if(obj.Country == item.Geography) {
                            return index;
                        }
                    });
                    geoObject[index].Users += 1;
                }
            });
        }

        function GroupDataByCategory(_chartData) {
            categoryObject = []
            var tempObject = [];
            $.each(_chartData, function (index, item) {
                var found = tempObject.some(function (el) {
                    return el.Category === item.JobCategory;
                });
                if (!found) {
                    var obj = {
                        Category: item.JobCategory,
                        AXP: item.TotalBudget,
                        Count: 1
                    }
                    tempObject.push(obj);
                } else {
                    var index = $.map(tempObject, function(obj, index) {
                        if(obj.Category == item.JobCategory) {
                            return index;
                        }
                    });
                    tempObject[index].AXP += item.TotalBudget;
                    tempObject[index].Count += 1;
                }
            });
            $.each(tempObject, function (index, item) {
                var obj = {
                    Category: item.Category,
                    AvgAXP: item.AXP / item.Count
                }
                categoryObject.push(obj);
            });
        }

        function GroupDataByJobStatus(_chartData){
            jobStatusObject = []
            var tempObject = [];
            $.each(_chartData, function (index, item) {
                var found = tempObject.some(function (el) {
                    return el.Status === item.JobStatus;
                });
                if (!found) {
                    var obj = {
                        Jobs: 1,
                        Status: item.JobStatus
                    }
                    tempObject.push(obj);
                } else {
                    var index = $.map(tempObject, function(obj, index) {
                        if(obj.Status == item.JobStatus) {
                            return index;
                        }
                    });
                    tempObject[index].Jobs += 1;
                }
            });
            $.each(tempObject, function (index, item) {
                var obj = {
                    Jobs: item.Jobs,
                    Status: item.Status
                }
                jobStatusObject.push(obj);
            });
            console.log(jobStatusObject);
        }

        function GroupDataByUserAction(_userData, _loginData) {
            tempData = [];
            $.each(_userData, function (index, item) {
                var _date = item.CreatedDate.split(' ')[0];
                var found = tempData.some(function (el) {
                    return el.Date === _date;
                });
                if (!found) {
                    var obj = {
                        Date: _date,
                        Signups: 1,
                        Logins: 0
                    }
                    tempData.push(obj);
                } else {
                    var index = $.map(tempData, function(obj, index) {
                        if(obj.Date == _date) {
                            return index;
                        }
                    });
                    tempData[index].Signups += 1;
                }
            });

            $.each(_loginData, function (index, item) {
                if(item.LoginDate != null) {
                    var _date = item.LoginDate.split(' ')[0];
                    var found = tempData.some(function (el) {
                        return el.Date === _date;
                    });
                    if (!found) {
                        var obj = {
                            Date: _date,
                            Signups: 0,
                            Logins: 1
                        }
                        tempData.push(obj);
                    } else {
                        var index = $.map(tempData, function(obj, index) {
                            if(obj.Date == _date) {
                                return index;
                            }
                        });
                        tempData[index].Logins += 1;
                    }
                }
            });
            userActionObject = tempData;
            console.log(userActionObject);
        }

        function GroupDataByRange(_chartData, _range) {
            console.log('Before date range:' + _chartData);
            return new Promise(function(resolve,reject) {
                var _tempChartData = [];
                if(_range) {
                    _chartData.sort(function(a,b){
                        return a.JobId - b.JobId;
                    });
                    _chartData.reverse();
                    if(_chartData.length > 0) {
                        var cDate = _chartData[0].CreatedDate.split(' ')[0].split('/');
                        newDate = new Date(cDate[2], cDate[1] - 1, cDate[0]);
                        if(_range) {
                            newDate = new Date(newDate.setDate(newDate.getDate() - _range));
                        }
                    }
                
                    $.each(_chartData, function(i, item) { 
                        var cDate = item.CreatedDate.split(' ')[0].split('/');
                        console.log(newDate + ', ' + new Date(cDate[2], cDate[1] - 1, cDate[0]));
                        if(newDate <= new Date(cDate[2], cDate[1] - 1, cDate[0])) {
                            _tempChartData.push(item);
                        }
                    });
                    console.log('After date range:' + _tempChartData);
                    resolve(_tempChartData);
                }
                else {
                    reject(null);
                }
            })
        }

        function LoadGoogleCharts() {
            google.charts.load('current', { 'packages':['corechart', 'bar', 'geochart'], 'callback': drawCharts });
        }

        function drawCharts() {
            drawRegionsMap(geoObject);
            drawColumnChart(categoryObject);
            drawPieChart(jobStatusObject);
            drawDualChart(userActionObject);
        }

        function drawRegionsMap(_geoObject) {
            var array = [["Country", "Users"]];
            $.each(_geoObject, function(i, item) {
                array.push([item.Country, item.Users]);
            });

            if(array.length < 2) {
                array.push(['', 0]);
            }
            var data = google.visualization.arrayToDataTable(array);

            var options = {
                title: 'Users by Geography',
                //height: 200,
                width: '100%',
                colors: ['#00acfc'],
               // color:'#0d0743',
                titleTextStyle:
                {
                    italic: false,
                }
            };

            var chart = new google.visualization.GeoChart(document.getElementById('gio_chart_div'));

            chart.draw(data, options);
        }

        function drawColumnChart(_categoryObject){
            var array = [["Category", "Average AXPR", {type: 'string', role: 'tooltip', p: {'html':true}}]];
            $.each(_categoryObject, function(i, item) {
                array.push([item.Category, item.AvgAXP, '$' + item.AvgAXP.toFixed(2)]);
            });

            if(array.length < 2) {
                array.push(['', 0, '$' + 0.0]);
            }
            // Create the data table.
            var data = new google.visualization.arrayToDataTable(array);

            //var columnRange = data.getColumnRange(1);

            // Set chart options
            var options = {
                title: 'Average AXPR by Category',
                height: 300,
                width: '100%',
                titleTextStyle:
                {
                    italic: false,
                    color: '#242335',
                    fontSize: '18'
                },
                pointSize: 5,
                legend:
                {
                    position: 'right',
                    textStyle:
                    {
                        color: '#666666'
                    }
                },
                colors: ['#00acfc', '#00acfc', '#00acfc'],
                backgroundColor: '#fff',
                //explorer: {

                //},
                vAxis:
                {
                    title: 'Average AXPR',
                    titleTextStyle:
                    {
                        italic: false,
                        color: '#666666',
                        fontSize: '20'
                    },
                    textStyle:
                    {
                        color: '#666666'
                    },
                    //viewWindow: {
                    //    min: columnRange.min
                    //},
                    logScale:true
                },
                hAxis:
                {
                    baselineColor: '#f5f5f5',
                    title: 'Category',
                    titleTextStyle:
                    {
                        color: '#666666',
                        italic: false,
                        fontSize: '20'
                    },
                    textStyle:
                    {
                        color: '#666666'
                    },
                    format: 'text'
                }
            };


            // Instantiate and draw our chart, passing in some options.
            chartColumn = new google.visualization.ColumnChart(document.getElementById('column_chart_div'));
            chartColumn.draw(data, options);

            // set up event handlers
            // when a user clicks on the PieChart, set the selection on the BarChart
            //google.visualization.events.addListener(chartColumn, 'select', function () {
            //    var selection = chartColumn.getSelection();
            //    //for (var i = 0; i < selection.length; i++) {
            //    //    // add in column information to specify selection in BarChart
            //    //    selection[i].column = 1;
            //    //}
            //    //chartBar.setSelection(selection);
            //    if(selection.length) {
            //        var obj = jobChartObjectByDate[selection[0].row];
            //        var tempChart = $.grep(jobChartObjectByProperty, function(v) {
            //            return v.Date === obj.Date;
            //        });
            //        var tmpData = FilterByDate(tempChart, obj.Date);
            //        jobChartObject = [];
            //        GroupData(tmpData);
            //        //drawBarChart();
            //        drawPieChart();
            //        drawTableChart(tempChart);
            //    }
            //});
        }

        function drawPieChart(_jobStatusObject){
            var array = [["Job Status", "Jobs"]];
            $.each(_jobStatusObject, function(i, item) {
                var status = "";
                switch(item.Status) {
                    case 'P': status = 'Posted'; break;
                    case 'B': status = 'Bid'; break;
                    case 'A': status = 'Approved'; break;
                    case 'C': status = 'Completed'; break;
                }
                //array.push([status, item.Jobs + ' (' + (item.Jobs / total_jobs * 100).toFixed(2)+ '%)']);
                array.push([status, item.Jobs]);
            });

            if(array.length < 2) {
                array.push(['', 0]);
            }
            // Create the data table.
            var data = new google.visualization.arrayToDataTable(array);

            // Set chart options
            var options = {
                title: 'Job Count by Job Status',
                width: '100%',
                height: 300,
                titleTextStyle:
                {
                    italic: false,
                    color: '#242335',
                    fontSize: '18'
                },
                pointSize: 5,
                legend:
                {
                    position: 'right',
                    textStyle:
                    {
                        color: '#666666'
                    }
                },
                colors: ['#f15f79', '#0d0743', '#00acfc','#de5cb8'],
                backgroundColor: '#fff',
                //hAxis:
                //{
                //    title: 'Job Status',
                //    titleTextStyle:
                //    {
                //        italic: false,
                //        color: '#666666',
                //        fontSize: '20'
                //    },
                //    textStyle:
                //    {
                //        color: '#666666'
                //    }
                //},
                //vAxis:
                //{
                //    baselineColor: '#f5f5f5',
                //    title: 'Jobs',
                //    titleTextStyle:
                //    {
                //        color: '#666666',
                //        italic: false,
                //        fontSize: '20'
                //    },
                //    textStyle:
                //    {
                //        color: '#666666'
                //    }
                //}
            };


            // Instantiate and draw our chart, passing in some options.
            chartPie = new google.visualization.PieChart(document.getElementById('pie_chart_div'));
            chartPie.draw(data, options);

            // set up event handlers
            // when a user clicks on the PieChart, set the selection on the BarChart
            //google.visualization.events.addListener(chartPie, 'select', function () {
            //    var selection = chartPie.getSelection();
            //    for (var i = 0; i < selection.length; i++) {
            //        // add in column information to specify selection in BarChart
            //        selection[i].column = 1;
            //    }
            //    //chartBar.setSelection(selection);
            //    if(selection.length) {
            //        var obj = jobChartObject[selection[0].row];
            //        var tempChart = $.grep(jobChartObjectByPropertyPrime, function(v) {
            //            return v.Category === obj.Category;
            //        });
            //        var _chartObject = $.grep(chartData, function(v) {
            //            return v.Category === obj.Category;
            //        });
            //        PresetForColumnChart(tempChart);
            //        drawColumnChart();
            //        drawTableChart(_chartObject);
            //    }
            //});
        }

        function drawDualChart(_userActionObject) {
            var array = [["Date", "Signups", "Logins"]];
            $.each(_userActionObject, function(i, item) {
                array.push([item.Date, item.Signups, item.Logins]);
            });

            if(array.length < 2) {
                array.push(['', 0, 0]);
            }
            // Create the data table.
            var data = new google.visualization.arrayToDataTable(array);

            //var columnRange = data.getColumnRange(1);

            // Set chart options
            var options = {
                chart: {
                    title: 'Daily Signups and Logins',
                    subtitle: 'Signups, and Logins',
                },
                bars: 'vertical',
                height: 300,
                width: '100%',
                colors: ['#0d0743', '#00acfc', '#7570b3'],
                vAxis: {
                    title: 'Count',
                    titleTextStyle:
                    {
                        italic: false,
                        color: '#666666',
                        fontSize: '20'
                    },
                    textStyle:
                   {
                       color: '#666666'
                   }
                },
                hAxis:
                {
                    baselineColor: '#f5f5f5',
                    title: 'Date',
                    titleTextStyle:
                    {
                        color: '#666666',
                        italic: false,
                        fontSize: '20'
                    },
                    textStyle:
                    {
                        color: '#666666'
                    },
                    format: 'ddMMyy'
                }
            };


            // Instantiate and draw our chart, passing in some options.
            chartDual = new google.charts.Bar(document.getElementById('dual_chart_div'));
            chartDual.draw(data, google.charts.Bar.convertOptions(options));
        }

        function CommonfilterByProperty() {
            return new Promise(function(resolve,reject) {
                var poster = $('#posters').val();
                var category = $('#category').val();
                var dateRange = Number($('#date-range').val());
                var tempData = [], _tempData = [];       
    
                if (poster != "all" && category != "all") {
                    $.each(chartData.JobDetails, function (index, item) {
                        if (item.Poster == poster && item.JobCategory == category) {
                            _tempData.push(item);
                        }
                    });
                    tempData = _tempData;
                } else if (poster == "all" && category != "all") {
                    $.each(chartData.JobDetails, function (index, item) {
                        if (item.JobCategory == category) {
                            _tempData.push(item);
                        }
                    });
                    tempData = _tempData;
                } else if (poster != "all" && category == "all") {
                    $.each(chartData.JobDetails, function (index, item) {
                        if (item.Poster == poster) {
                            _tempData.push(item);
                        }
                    });
                    tempData = _tempData;
                } else {
                    tempData = chartData.JobDetails;
                }

                //if(poster != "all") {
                //    var tempDataPost = [];
                //    $.each(chartData.JobDetails, function (index, item) {
                //        if (item.Poster == poster) {
                //            tempDataPost.push(item);
                //        }
                //    });
                //    tempData = tempDataPost;
                //}
                //if(category != "all") {
                //    if(tempData.length != 0) {
                //        var tempDataCat = [];
                //        $.each(tempData, function (index, item) {
                //            if (item.JobCategory == category) {
                //                tempDataCat.push(item);
                //            }
                //        });
                //        tempData = tempDataCat;
                //    } 
                //    else {
                //        $.each(chartData.JobDetails, function (index, item) {
                //            if (item.JobCategory == category) {
                //                tempData.push(item);
                //            }
                //        });
                //    }
                //}
                if(dateRange != 0) {
                    if(tempData.length != 0) {
                        _tempData = [];
                        var newDate = new Date();
                        newDate = new Date(newDate.setDate(newDate.getDate() - dateRange));
                        $.each(tempData, function(i, item) {  
                            var iDate = item.CreatedDate.split(' ')[0].split('/');
                            if(newDate <= new Date(iDate[2], iDate[1] - 1, iDate[0])) {
                                _tempData.push(item);
                            }
                        });
                        tempData = _tempData;
                    }
                }
                resolve(tempData);
            })
        }
        function SetDisplayValues(_chartData) {
            var jobPosted = _chartData.JobDetails.length;
            $('#jobPosted').text(jobPosted);
            var freelancers = $.grep(_chartData.UserDetails, function(v) {
                return v.UserType == "1" || v.UserType == "3";
            });
            $('#freelancers').text(freelancers.length);
            var jobPosters = $.grep(_chartData.UserDetails, function(v) {
                return v.UserType == "2" || v.UserType == "3";
            });
            $('#jobPosters').text(jobPosters.length);
            var respondents = [];
            $.each(_chartData.BidDetails, function (index, item) {
                var found = respondents.some(function (el) {
                    return el.UserId === item.UserId;
                });
                if (!found) {
                    respondents.push(item);
                }
            });
            $('#respondents').text(respondents.length);
            var totalBudget = 0.0;
            $.each(_chartData.JobDetails, function (index, item) {
                totalBudget += item.TotalBudget;
            });
            var avgAXPRJob = jobPosted != 0 ? totalBudget / jobPosted : 0;
            $('#avgAXPRJob').text(Number(avgAXPRJob.toFixed(3)).toLocaleString('en-US'));
            var AXPRJobSeeker = 0.0;
            var AXPRBurned = 0.0;
            $.each(_chartData.JobDetails, function (index, item) {
                if(item.JobStatus == 'C') {
                    AXPRJobSeeker += item.AXPComp;
                    AXPRBurned += item.ComComp;
                }
            });
            $('#AXPRJobSeeker').text(Number(AXPRJobSeeker.toFixed(3)).toLocaleString('en-US'));
            $('#AXPRBurned').text(Number(AXPRBurned.toFixed(3)).toLocaleString('en-US'));
        }

        $('#posters').unbind('change');
        $('#category').unbind('change');
        $('#date-range').unbind('change');
        $('#reset').unbind('click');
        $('#posters').change(function() {
            if(chartData) {
                var _chartData = $.extend(true, {}, chartData);
                CommonfilterByProperty().then(function(tempData) {
                    GroupDataByCategory(tempData);
                    GroupDataByJobStatus(tempData);
                    drawColumnChart(categoryObject);
                    drawPieChart(jobStatusObject);
                })
                    //SetDisplayValues(_chartData);
                //} else {
                //    GroupDataByCategory(chartData.JobDetails);
                //    GroupDataByJobStatus(chartData.JobDetails);
                //    drawColumnChart(categoryObject);
                //    drawPieChart(jobStatusObject);
                //    //SetDisplayValues(chartData);
                //}
            }
        });
        $('#category').change(function() {
            if(chartData) {
                var _chartData = $.extend(true, {}, chartData);
                CommonfilterByProperty().then(function(tempData) {
                    GroupDataByCategory(tempData);
                    GroupDataByJobStatus(tempData);
                    drawColumnChart(categoryObject);
                    drawPieChart(jobStatusObject);
                })
                    //SetDisplayValues(_chartData);
                //} else {
                //    GroupDataByCategory(chartData.JobDetails);
                //    GroupDataByJobStatus(chartData.JobDetails);
                //    drawColumnChart(categoryObject);
                //    drawPieChart(jobStatusObject);
                //    //SetDisplayValues(chartData);
                //}
            }
        });
        $('#date-range').change(function() {
            if(chartData) {
                var _chartData = $.extend(true, {}, chartData);
                CommonfilterByProperty().then(function(tempData) {
                    GroupDataByCategory(tempData);
                    GroupDataByJobStatus(tempData);
                    drawColumnChart(categoryObject);
                    drawPieChart(jobStatusObject);
                })
                //if(this.value != 0) {
                //    var tempData = [];
                //    var dateRange = this.value;
                //    GroupDataByRange(_chartData.JobDetails, dateRange).then(function(tempData){
                //        console.log(tempData);
                //        GroupDataByCategory(tempData);
                //        GroupDataByJobStatus(tempData);
                //        drawColumnChart(categoryObject);
                //        drawPieChart(jobStatusObject);
                //    }).catch(error => {
                //        console.log('Invalid date range');
                //    });
                //} else {
                //    GroupDataByCategory(chartData.JobDetails);
                //    GroupDataByJobStatus(chartData.JobDetails);
                //    drawColumnChart(categoryObject);
                //    drawPieChart(jobStatusObject);
                //}
            }
        });
        $('#reset').click(function() {
            if(chartData) {
                $('#posters  option[value="all"]').prop("selected", true);
                $('#category  option[value="all"]').prop("selected", true);
                $('#date-range  option[value="0"]').prop("selected", true);
                GroupData(chartData);
                LoadGoogleCharts();
                SetDisplayValues(chartData);
            }
        });
        $(window).resize(function(){
            GroupData(chartData);
            LoadGoogleCharts();
            SetDisplayValues(chartData);
        });
    });
</script>